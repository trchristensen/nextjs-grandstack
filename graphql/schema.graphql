type DummyResponse {
  error: Boolean!
}

type User {
  id: ID!
  userId: ID!
  name: String
  email: String
  isAdmin: Boolean!
  isPremium: Boolean!
  avatar: String
  reviews: [Review] @relation(name: "WROTE", direction: "OUT")
  avgStars: Float
    @cypher(
      statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN toFloat(avg(r.stars))"
    )
  numReviews: Int
    @cypher(statement: "MATCH (this)-[:WROTE]->(r:Review) RETURN COUNT(r)")
  recommendations(first: Int = 3): [Company]
    @cypher(
      statement: "MATCH (this)-[:WROTE]->(r:Review)-[:REVIEWS]->(:Company)<-[:REVIEWS]-(:Review)<-[:WROTE]-(:User)-[:WROTE]->(:Review)-[:REVIEWS]->(rec:Company) WHERE NOT EXISTS( (this)-[:WROTE]->(:Review)-[:REVIEWS]->(rec) ) WITH rec, COUNT(*) AS num ORDER BY num DESC LIMIT $first RETURN rec"
    )
  comments: [Comment] @relation(name: "WROTE", direction: "OUT")
}

type Recipe {
  id: ID!
  recipeId: ID!
  name: String!
  description: String!
  notes: String
  mixingPercentage: Int
  steepTime: Int
  published: String
  lastEdited: String
  creator: User @relation(name: "CREATED_BY", direction: "OUT")
  parent: Recipe @relation(name: "ADAPTED_FROM", direction: "OUT")
  ingredients: [Ingredient]
  tags: [Tag] @relation(name: "HAS_TAG", direction: "OUT")
  isArchived: Boolean
  comments: [Comment] @relation(name: "COMMENT_ON", direction: "IN")
  numComments: Int
    @cypher(
      statement: "MATCH (this)<-[:COMMENT_ON]-(c:Comment) RETURN COUNT(c)"
    )
  numLikes: Int
    @cypher(
      statement: "MATCH (this)-[r:RATED_BY]-(u:User) RETURN count(CASE WHEN r.like = true THEN 1 END)"
    )
  numDislikes: Int
    @cypher(
      statement: "MATCH (this)-[r:RATED_BY]-(u:User) RETURN count(CASE WHEN r.like = false THEN 1 END)"
    )
  likes: [Rating]
    @cypher(
      statement: "MATCH (this)-[rating:RATED_BY]->(u:User) WITH rating, u WHERE rating.like = true RETURN rating"
    )
  dislikes: [Rating]
    @cypher(
      statement: "MATCH (this)-[rating:RATED_BY]->(u:User) WITH rating, u WHERE rating.like = false RETURN rating"
    )
}

type Ingredient @relation(name: "USED_IN") {
  from: Flavor
  to: Recipe
  percentage: Int
}

type Flavor {
  flavorId: ID!
  name: String!
  company: Company @relation(name: "MADE_BY", direction: "OUT")
  description: String!
  tags: [Tag] @relation(name: "HAS_TAG", direction: "OUT")
  # likes: [Like]
}

type Rating {
  userId: String!
  recipeId: String!
  ratingId: ID!
  timestamp: String!
  like: Boolean!
}

type Tag {
  tagId: ID!
  name: String!
}

type Comment {
  commentId: ID!
  published: String!
  text: String!
  author: User @relation(name: "WROTE", direction: "IN")
  recipe: Recipe @relation(name: "COMMENT_ON", direction: "OUT")
  # replies: Reply @relation(name: "REPLY_TO", direction: "IN")
  # likes: [Like]
}

type Company {
  companyId: ID!
  name: String!
  address: String
  city: String
  state: String
  # location: Point
  website: String
  facebook: String
  phone: String
  avgStars: Float
    @cypher(
      statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN coalesce(avg(r.stars),0.0)"
    )
  reviews: [Review] @relation(name: "REVIEWS", direction: "IN")
  categories: [Category] @relation(name: "IN_CATEGORY", direction: "OUT")
}

input CustomIngredientsInput {
  percentage: Int
  flavorId: String
}

input CustomTagsInput {
  tagId: ID!
  name: String!
}

type Query {
  currentUser: User

  recipesNotArchived: [Recipe]
    @cypher(
      statement: "MATCH (r:Recipe) WHERE NOT r.isArchived = TRUE RETURN r"
    )
  recipesNotArchivedFiltered(filter: String): [Recipe]
    @cypher(
      statement: "MATCH (r:Recipe) WHERE NOT r.isArchived = TRUE WHERE r.  RETURN r"
    )
  userRecipes(userId: ID!): [Recipe]
    @cypher(
      statement: "MATCH (r:Recipe)-[c:CREATED_BY]->(u:User) WHERE NOT r.isArchived = TRUE WITH r, u WHERE u.userId = $userId RETURN r"
    )

  userCount: Int! @cypher(statement: "MATCH (u:User) RETURN COUNT(u)")
  ratingsCount: [RatingCount]
    @cypher(
      statement: "MATCH (r:Review) WITH r.stars AS stars, COUNT(*) AS count ORDER BY stars RETURN {stars: stars, count: count}"
    )
}

type Mutation {
  updateRecipeRating(
    userId: String!
    recipeId: String!
    ratingId: ID!
    timestamp: String!
    like: Boolean!
  ): Rating
    @cypher(
      statement: "MATCH (u:User) WHERE u.userId = $userId WITH u MATCH (r:Recipe) WHERE r.recipeId = $recipeId WITH r, u MERGE (u)<-[l:RATED_BY]-(r) SET l.ratingId = $ratingId, l.timestamp = $timestamp, l.like = $like, l.userId = $userId return l"
    )

  dummy: DummyResponse

  mergeCompanyCategory(categories: [String!]!, companyId: ID!): Company
    @cypher(
      statement: "MATCH (b:Company {companyId: $companyId}) UNWIND $categories AS cat MERGE (c:Category {name: cat}) MERGE (b)-[:IN_CATEGORY]->(c) RETURN b"
    )

  createRecipeWithIngredientsAndTags(
    id: ID!
    recipeId: ID!
    name: String!
    description: String!
    published: String!
    userId: String!
    ingredients: [CustomIngredientsInput]
    isArchived: Boolean
    notes: String
    mixingPercentage: Int
    tags: [CustomTagsInput]
    steepTime: Int
    parent: String
  ): Recipe
    @cypher(
      statement: "MATCH (u:User) WHERE u.userId = $userId WITH u MERGE (u)<-[:CREATED_BY]-(r:Recipe {recipeId: $recipeId, id: $id, name: $name, description: $description, published: $published, isArchived: $isArchived, notes: $notes, mixingPercentage: $mixingPercentage, steepTime: $steepTime}) WITH r, u UNWIND $ingredients as ingredient MATCH (f:Flavor) WHERE f.flavorId = ingredient.flavorId MERGE (r)<-[:USED_IN {percentage: ingredient.percentage}]-(f) WITH r, u UNWIND $tags as tag MERGE (t:Tag {tagId: tag.tagId, name: tag.name}) MERGE (r)-[:HAS_TAG]->(t) WITH r MATCH (parent:Recipe) WHERE parent.recipeId = $parent WITH parent, r WHERE NOT parent IS NULL MERGE (r)-[:ADAPTED_FROM]->(parent) RETURN r"
    )

    updateRecipeWithIngredientsAndTags(
    id: ID!
    recipeId: ID!
    name: String!
    description: String!
    published: String!
    userId: String!
    ingredients: [CustomIngredientsInput]
    isArchived: Boolean
    notes: String
    mixingPercentage: Int
    tags: [CustomTagsInput]
    steepTime: Int
    parent: String
  ): Recipe
    @cypher(
      statement: "MATCH (r:Recipe) WHERE r.recipeId = $recipeId WITH r DETACH DELETE r WITH count(*) as dummy MATCH (u:User) WHERE u.userId = $userId WITH u MERGE (u)<-[:CREATED_BY]-(r:Recipe {recipeId: $recipeId, id: $id, name: $name, description: $description, published: $published, isArchived: $isArchived, notes: $notes, mixingPercentage: $mixingPercentage, steepTime: $steepTime}) WITH r, u UNWIND $ingredients as ingredient MATCH (f:Flavor) WHERE f.flavorId = ingredient.flavorId MERGE (r)<-[:USED_IN {percentage: ingredient.percentage}]-(f) WITH r, u UNWIND $tags as tag MERGE (t:Tag {tagId: tag.tagId, name: tag.name}) MERGE (r)-[:HAS_TAG]->(t) WITH r MATCH (parent:Recipe) WHERE parent.recipeId = $parent WITH parent, r WHERE NOT parent IS NULL MERGE (r)-[:ADAPTED_FROM]->(parent) RETURN r"
    )

  archiveRecipe(recipeId: ID!, userId: ID!): Recipe
    @cypher(
      statement: "MATCH (r:Recipe) WHERE r.recipeId = $recipeId SET r.isArchived = true RETURN r"
    )

  createCommentForRecipe(
    commentId: String!
    recipeId: String!
    userId: String!
    text: String!
    published: String!
  ): Comment
    @cypher(
      statement: "MATCH (r:Recipe) WHERE r.recipeId = $recipeId MATCH (u:User) WHERE u.userId = $userId WITH u, r MERGE (r)<-[rel:COMMENT_ON]-(c:Comment {commentId: $commentId, text: $text, published: $published})<-[:WROTE]-(u) RETURN c"
    )

  createReplyToComment(
    replyId: String!
    commentId: String!
    userId: String!
    text: String!
    published: String!
  ): Comment
    @cypher(
      statement: "MATCH (c:Comment) WHERE c.commentId = $commentId MATCH (u:User) WHERE u.userId = $userId WITH u, c MERGE (c)<-[rel:REPLIED_TO]-(reply:Reply{replyId: $replyId, text: $text, published: $published})<-[:WROTE]-(u) RETURN c"
    )

  

  # createUserWithRoles(
  #   id: ID!
  #   isadmin: Boolean!
  #   isPremium: Boolean!
  #   displayName: String
  # ): User
  # @cypher(
  #   statement: ""
  # )
}


type Review {
  reviewId: ID!
  stars: Float
  text: String
  date: String
  company: Company @relation(name: "REVIEWS", direction: "OUT")
  user: User @relation(name: "WROTE", direction: "IN")
}

type Category {
  name: ID!
  companies: [Company] @relation(name: "IN_CATEGORY", direction: "IN")
}

type RatingCount {
  stars: Float!
  count: Int!
}

# type Reply {
#   replyId: ID!
#   published: String!
#   text: String!
#   author: User @relation(name: "WROTE", direction: "IN")
#   # replies: Reply @relation(name: "REPLIED_TO", direction: "IN")
#   # likes: [Like]
# }
